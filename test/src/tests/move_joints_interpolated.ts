/*
 * Copyright (c) 2023. Glowbuzzer. All rights reserved
 */

import * as uvu from "uvu"
import { gbc } from "../../gbc"

const test = uvu.suite("joints")

test.before.each(() => {
    gbc.config().joints(1, { vmax: 200, amax: 4000, jmax: 80000 }).cartesianKinematics().finalize()

    gbc.enable_operation()
})

const data_raw = `
vel\tpos
0\t0
4\t0.004
8\t0.012
12\t0.024
16\t0.04
20\t0.06
24\t0.084
28\t0.112
32\t0.144
36\t0.18
40\t0.22
44\t0.264
48\t0.312
52\t0.364
56\t0.42
60\t0.48
64\t0.544
68\t0.612
72\t0.684
76\t0.76
80\t0.84
84\t0.924
88\t1.012
92\t1.104
96\t1.2
100\t1.3
104\t1.404
108\t1.512
112\t1.624
116\t1.74
120\t1.86
124\t1.984
128\t2.112
132\t2.244
136\t2.38
140\t2.52
144\t2.664
148\t2.812
152\t2.964
156\t3.12
160\t3.28
164\t3.444
168\t3.612
172\t3.784
176\t3.96
180\t4.14
184\t4.324
188\t4.512
192\t4.704
196\t4.9
200\t5.1
204\t5.304
208\t5.512
212\t5.724
216\t5.94
220\t6.16
224\t6.384
228\t6.612
232\t6.844
236\t7.08
240\t7.32
244\t7.564
248\t7.812
252\t8.064
256\t8.32
260\t8.58
264\t8.844
268\t9.112
272\t9.384
276\t9.66
280\t9.94
284\t10.224
288\t10.512
292\t10.804
296\t11.1
300\t11.4
304\t11.704
308\t12.012
312\t12.324
316\t12.64
320\t12.96
324\t13.284
328\t13.612
332\t13.944
336\t14.28
340\t14.62
344\t14.964
348\t15.312
352\t15.664
356\t16.02
360\t16.38
364\t16.744
368\t17.112
372\t17.484
376\t17.86
380\t18.24
384\t18.624
388\t19.012
392\t19.404
396\t19.8
400\t20.2
404\t20.604
408\t21.012
412\t21.424
416\t21.84
420\t22.26
424\t22.684
428\t23.112
432\t23.544
436\t23.98
440\t24.42
444\t24.864
448\t25.312
452\t25.764
456\t26.22
460\t26.68
464\t27.144
468\t27.612
472\t28.084
476\t28.56
480\t29.04
484\t29.524
488\t30.012
492\t30.504
496\t31
500\t31.5
504\t32.004
508\t32.512
512\t33.024
516\t33.54
520\t34.06
524\t34.584
528\t35.112
532\t35.644
536\t36.18
540\t36.72
544\t37.264
548\t37.812
552\t38.364
556\t38.92
560\t39.48
564\t40.044
568\t40.612
572\t41.184
576\t41.76
580\t42.34
584\t42.924
588\t43.512
592\t44.104
596\t44.7
600\t45.3
604\t45.904
608\t46.512
612\t47.124
616\t47.74
620\t48.36
624\t48.984
628\t49.612
632\t50.244
636\t50.88
640\t51.52
644\t52.164
648\t52.812
652\t53.464
656\t54.12
660\t54.78
664\t55.444
668\t56.112
672\t56.784
676\t57.46
680\t58.14
684\t58.824
688\t59.512
692\t60.204
696\t60.9
700\t61.6
704\t62.304
708\t63.012
712\t63.724
716\t64.44
720\t65.16
724\t65.884
728\t66.612
732\t67.344
736\t68.08
740\t68.82
744\t69.564
748\t70.312
752\t71.064
756\t71.82
760\t72.58
764\t73.344
768\t74.112
772\t74.884
776\t75.66
780\t76.44
784\t77.224
788\t78.012
792\t78.804
796\t79.6
800\t80.4
804\t81.204
808\t82.012
812\t82.824
816\t83.64
820\t84.46
824\t85.284
828\t86.112
832\t86.944
836\t87.78
840\t88.62
844\t89.464
848\t90.312
852\t91.164
856\t92.02
860\t92.88
864\t93.744
868\t94.612
872\t95.484
876\t96.36
880\t97.24
884\t98.124
888\t99.012
892\t99.904
896\t100.8
900\t101.7
904\t102.604
908\t103.512
912\t104.424
916\t105.34
920\t106.26
924\t107.184
928\t108.112
932\t109.044
936\t109.98
940\t110.92
944\t111.864
948\t112.812
952\t113.764
956\t114.72
960\t115.68
964\t116.644
968\t117.612
972\t118.584
976\t119.56
980\t120.54
984\t121.524
988\t122.512
992\t123.504
996\t124.5
1000\t125.5
1004\t126.504
1008\t127.512
1012\t128.524
1016\t129.54
1020\t130.56
1024\t131.584
1028\t132.612
1032\t133.644
1036\t134.68
1040\t135.72
1044\t136.764
1048\t137.812
1052\t138.864
1056\t139.92
1060\t140.98
1064\t142.044
1068\t143.112
1072\t144.184
1076\t145.26
1080\t146.34
1084\t147.424
1088\t148.512
1092\t149.604
1096\t150.7
1100\t151.8
1104\t152.904
1108\t154.012
1112\t155.124
1116\t156.24
1120\t157.36
1124\t158.484
1128\t159.612
1132\t160.744
1136\t161.88
1140\t163.02
1144\t164.164
1148\t165.312
1152\t166.464
1156\t167.62
1160\t168.78
1164\t169.944
1168\t171.112
1172\t172.284
1176\t173.46
1180\t174.64
1184\t175.824
1188\t177.012
1192\t178.204
1196\t179.4
1200\t180.6
1204\t181.804
1208\t183.012
1212\t184.224
1216\t185.44
1220\t186.66
1224\t187.884
1228\t189.112
1232\t190.344
1236\t191.58
1240\t192.82
1244\t194.064
1248\t195.312
1252\t196.564
1256\t197.82
1260\t199.08
1264\t200.344
1268\t201.612
1272\t202.884
1276\t204.16
1280\t205.44
1284\t206.724
1288\t208.012
1292\t209.304
1296\t210.6
1300\t211.9
1304\t213.204
1308\t214.512
1312\t215.824
1316\t217.14
1320\t218.46
1324\t219.784
1328\t221.112
1332\t222.444
1336\t223.78
1340\t225.12
1344\t226.464
1348\t227.812
1352\t229.164
1356\t230.52
1360\t231.88
1364\t233.244
1368\t234.612
1372\t235.984
1376\t237.36
1380\t238.74
1384\t240.124
1388\t241.512
1392\t242.904
1396\t244.3
1400\t245.7
1404\t247.104
1408\t248.512
1412\t249.924
1416\t251.34
1420\t252.76
1424\t254.184
1428\t255.612
1432\t257.044
1436\t258.48
1440\t259.92
1444\t261.364
1448\t262.812
1452\t264.264
1456\t265.72
1460\t267.18
1464\t268.644
1468\t270.112
1472\t271.584
1476\t273.06
1480\t274.54
1484\t276.024
1488\t277.512
1492\t279.004
1496\t280.5
1500\t282
1504\t283.504
1508\t285.012
1512\t286.524
1516\t288.04
1520\t289.56
1524\t291.084
1528\t292.612
1532\t294.144
1536\t295.68
1540\t297.22
1544\t298.764
1548\t300.312
1552\t301.864
1552\t303.416
1552\t304.968
1552\t306.52
1552\t308.072
1552\t309.624
1552\t311.176
1552\t312.728
1552\t314.28
1552\t315.832
1552\t317.384
1552\t318.936
1552\t320.488
1552\t322.04
1552\t323.592
1552\t325.144
1552\t326.696
1552\t328.248
1552\t329.8
1552\t331.352
1552\t332.904
1552\t334.456
1552\t336.008
1552\t337.56
1552\t339.112
1552\t340.664
1552\t342.216
1552\t343.768
1552\t345.32
1552\t346.872
1552\t348.424
1552\t349.976
1552\t351.528
1552\t353.08
1552\t354.632
1552\t356.184
1552\t357.736
1552\t359.288
1552\t360.84
1552\t362.392
1552\t363.944
1552\t365.496
1552\t367.048
1552\t368.6
1552\t370.152
1552\t371.704
1552\t373.256
1552\t374.808
1552\t376.36
1552\t377.912
1552\t379.464
1552\t381.016
1552\t382.568
1552\t384.12
1552\t385.672
1552\t387.224
1552\t388.776
1552\t390.328
1552\t391.88
1552\t393.432
1552\t394.984
1552\t396.536
1552\t398.088
1552\t399.64
1552\t401.192
1552\t402.744
1552\t404.296
1552\t405.848
1552\t407.4
1552\t408.952
1552\t410.504
1552\t412.056
1552\t413.608
1552\t415.16
1552\t416.712
1552\t418.264
1552\t419.816
1552\t421.368
1552\t422.92
1552\t424.472
1552\t426.024
1552\t427.576
1552\t429.128
1552\t430.68
1552\t432.232
1552\t433.784
1552\t435.336
1552\t436.888
1552\t438.44
1552\t439.992
1552\t441.544
1552\t443.096
1552\t444.648
1552\t446.2
1552\t447.752
1552\t449.304
1552\t450.856
1552\t452.408
1552\t453.96
1552\t455.512
1552\t457.064
1552\t458.616
1552\t460.168
1552\t461.72
1552\t463.272
1552\t464.824
1552\t466.376
1552\t467.928
1552\t469.48
1552\t471.032
1552\t472.584
1552\t474.136
1552\t475.688
1552\t477.24
1552\t478.792
1552\t480.344
1552\t481.896
1552\t483.448
1552\t485
1552\t486.552
1552\t488.104
1552\t489.656
1552\t491.208
1552\t492.76
1552\t494.312
1552\t495.864
1552\t497.416
1552\t498.968
1552\t500.52
1552\t502.072
1552\t503.624
1552\t505.176
1552\t506.728
1552\t508.28
1552\t509.832
1552\t511.384
1552\t512.936
1552\t514.488
1552\t516.04
1552\t517.592
1552\t519.144
1552\t520.696
1552\t522.248
1552\t523.8
1552\t525.352
1552\t526.904
1552\t528.456
1552\t530.008
1552\t531.56
1552\t533.112
1552\t534.664
1552\t536.216
1552\t537.768
1552\t539.32
1552\t540.872
1552\t542.424
1552\t543.976
1552\t545.528
1552\t547.08
1552\t548.632
1552\t550.184
1552\t551.736
1552\t553.288
1552\t554.84
1552\t556.392
1552\t557.944
1552\t559.496
1552\t561.048
1552\t562.6
1552\t564.152
1552\t565.704
1552\t567.256
1552\t568.808
1552\t570.36
1552\t571.912
1552\t573.464
1552\t575.016
1552\t576.568
1552\t578.12
1552\t579.672
1552\t581.224
1552\t582.776
1552\t584.328
1552\t585.88
1552\t587.432
1552\t588.984
1552\t590.536
1552\t592.088
1552\t593.64
1552\t595.192
1552\t596.744
1552\t598.296
1552\t599.848
1552\t601.4
1552\t602.952
1552\t604.504
1552\t606.056
1552\t607.608
1552\t609.16
1552\t610.712
1552\t612.264
1552\t613.816
1552\t615.368
1552\t616.92
1552\t618.472
1552\t620.024
1552\t621.576
1552\t623.128
1552\t624.68
1552\t626.232
1552\t627.784
1552\t629.336
1552\t630.888
1552\t632.44
1552\t633.992
1552\t635.544
1552\t637.096
1552\t638.648
1552\t640.2
1552\t641.752
1552\t643.304
1552\t644.856
1552\t646.408
1552\t647.96
1552\t649.512
1552\t651.064
1552\t652.616
1552\t654.168
1552\t655.72
1552\t657.272
1552\t658.824
1552\t660.376
1552\t661.928
1552\t663.48
1552\t665.032
1552\t666.584
1552\t668.136
1552\t669.688
1552\t671.24
1552\t672.792
1552\t674.344
1552\t675.896
1552\t677.448
1552\t679
1552\t680.552
1552\t682.104
1552\t683.656
1552\t685.208
1552\t686.76
1552\t688.312
1552\t689.864
1552\t691.416
1552\t692.968
1552\t694.52
1552\t696.072
1552\t697.624
1552\t699.176
1552\t700.728
1552\t702.28
1552\t703.832
1552\t705.384
1552\t706.936
1552\t708.488
1552\t710.04
1552\t711.592
1552\t713.144
1552\t714.696
1552\t716.248
1552\t717.8
1552\t719.352
1552\t720.904
1552\t722.456
1552\t724.008
1552\t725.56
1552\t727.112
1552\t728.664
1552\t730.216
1552\t731.768
1552\t733.32
1548\t734.868
1544\t736.412
1540\t737.952
1536\t739.488
1532\t741.02
1528\t742.548
1524\t744.072
1520\t745.592
1516\t747.108
1512\t748.62
1508\t750.128
1504\t751.632
1500\t753.132
1496\t754.628
1492\t756.12
1488\t757.608
1484\t759.092
1480\t760.572
1476\t762.048
1472\t763.52
1468\t764.988
1464\t766.452
1460\t767.912
1456\t769.368
1452\t770.82
1448\t772.268
1444\t773.712
1440\t775.152
1436\t776.588
1432\t778.02
1428\t779.448
1424\t780.872
1420\t782.292
1416\t783.708
1412\t785.12
1408\t786.528
1404\t787.932
1400\t789.332
1396\t790.728
1392\t792.12
1388\t793.508
1384\t794.892
1380\t796.272
1376\t797.648
1372\t799.02
1368\t800.388
1364\t801.752
1360\t803.112
1356\t804.468
1352\t805.82
1348\t807.168
1344\t808.512
1340\t809.852
1336\t811.188
1332\t812.52
1328\t813.848
1324\t815.172
1320\t816.492
1316\t817.808
1312\t819.12
1308\t820.428
1304\t821.732
1300\t823.032
1296\t824.328
1292\t825.62
1288\t826.908
1284\t828.192
1280\t829.472
1276\t830.748
1272\t832.02
1268\t833.288
1264\t834.552
1260\t835.812
1256\t837.068
1252\t838.32
1248\t839.568
1244\t840.812
1240\t842.052
1236\t843.288
1232\t844.52
1228\t845.748
1224\t846.972
1220\t848.192
1216\t849.408
1212\t850.62
1208\t851.828
1204\t853.032
1200\t854.232
1196\t855.428
1192\t856.62
1188\t857.808
1184\t858.992
1180\t860.172
1176\t861.348
1172\t862.52
1168\t863.688
1164\t864.852
1160\t866.012
1156\t867.168
1152\t868.32
1148\t869.468
1144\t870.612
1140\t871.752
1136\t872.888
1132\t874.02
1128\t875.148
1124\t876.272
1120\t877.392
1116\t878.508
1112\t879.62
1108\t880.728
1104\t881.832
1100\t882.932
1096\t884.028
1092\t885.12
1088\t886.208
1084\t887.292
1080\t888.372
1076\t889.448
1072\t890.52
1068\t891.588
1064\t892.652
1060\t893.712
1056\t894.768
1052\t895.82
1048\t896.868
1044\t897.912
1040\t898.952
1036\t899.988
1032\t901.02
1028\t902.048
1024\t903.072
1020\t904.092
1016\t905.108
1012\t906.12
1008\t907.128
1004\t908.132
1000\t909.132
996\t910.128
992\t911.12
988\t912.108
984\t913.092
980\t914.072
976\t915.048
972\t916.02
968\t916.988
964\t917.952
960\t918.912
956\t919.868
952\t920.82
948\t921.768
944\t922.712
940\t923.652
936\t924.588
932\t925.52
928\t926.448
924\t927.372
920\t928.292
916\t929.208
912\t930.12
908\t931.028
904\t931.932
900\t932.832
896\t933.728
892\t934.62
888\t935.508
884\t936.392
880\t937.272
876\t938.148
872\t939.02
868\t939.888
864\t940.752
860\t941.612
856\t942.468
852\t943.32
848\t944.168
844\t945.012
840\t945.852
836\t946.688
832\t947.52
828\t948.348
824\t949.172
820\t949.992
816\t950.808
812\t951.62
808\t952.428
804\t953.232
800\t954.032
796\t954.828
792\t955.62
788\t956.408
784\t957.192
780\t957.972
776\t958.748
772\t959.52
768\t960.288
764\t961.052
760\t961.812
756\t962.568
752\t963.32
748\t964.068
744\t964.812
740\t965.552
736\t966.288
732\t967.02
728\t967.748
724\t968.472
720\t969.192
716\t969.908
712\t970.62
708\t971.328
704\t972.032
700\t972.732
696\t973.428
692\t974.12
688\t974.808
684\t975.492
680\t976.172
676\t976.848
672\t977.52
668\t978.188
664\t978.852
660\t979.512
656\t980.168
652\t980.82
648\t981.468
644\t982.112
640\t982.752
636\t983.388
632\t984.02
628\t984.648
624\t985.272
620\t985.892
616\t986.508
612\t987.12
608\t987.728
604\t988.332
600\t988.932
596\t989.528
592\t990.12
588\t990.708
584\t991.292
580\t991.872
576\t992.448
572\t993.02
568\t993.588
564\t994.152
560\t994.712
556\t995.268
552\t995.82
548\t996.368
544\t996.912
540\t997.452
536\t997.988
532\t998.52
528\t999.048
524\t999.572
520\t1000.092
516\t1000.608
512\t1001.12
508\t1001.628
504\t1002.132
500\t1002.632
496\t1003.128
492\t1003.62
488\t1004.108
484\t1004.592
480\t1005.072
476\t1005.548
472\t1006.02
468\t1006.488
464\t1006.952
460\t1007.412
456\t1007.868
452\t1008.32
448\t1008.768
444\t1009.212
440\t1009.652
436\t1010.088
432\t1010.52
428\t1010.948
424\t1011.372
420\t1011.792
416\t1012.208
412\t1012.62
408\t1013.028
404\t1013.432
400\t1013.832
396\t1014.228
392\t1014.62
388\t1015.008
384\t1015.392
380\t1015.772
376\t1016.148
372\t1016.52
368\t1016.888
364\t1017.252
360\t1017.612
356\t1017.968
352\t1018.32
348\t1018.668
344\t1019.012
340\t1019.352
336\t1019.688
332\t1020.02
328\t1020.348
324\t1020.672
320\t1020.992
316\t1021.308
312\t1021.62
308\t1021.928
304\t1022.232
300\t1022.532
296\t1022.828
292\t1023.12
288\t1023.408
284\t1023.692
280\t1023.972
276\t1024.248
272\t1024.52
268\t1024.788
264\t1025.052
260\t1025.312
256\t1025.568
252\t1025.82
248\t1026.068
244\t1026.312
240\t1026.552
236\t1026.788
232\t1027.02
228\t1027.248
224\t1027.472
220\t1027.692
216\t1027.908
212\t1028.12
208\t1028.328
204\t1028.532
200\t1028.732
196\t1028.928
192\t1029.12
188\t1029.308
184\t1029.492
180\t1029.672
176\t1029.848
172\t1030.02
168\t1030.188
164\t1030.352
160\t1030.512
156\t1030.668
152\t1030.82
148\t1030.968
144\t1031.112
140\t1031.252
136\t1031.388
132\t1031.52
128\t1031.648
124\t1031.772
120\t1031.892
116\t1032.008
112\t1032.12
108\t1032.228
104\t1032.332
100\t1032.432
96\t1032.528
92\t1032.62
88\t1032.708
84\t1032.792
80\t1032.872
76\t1032.948
72\t1033.02
68\t1033.088
64\t1033.152
60\t1033.212
56\t1033.268
52\t1033.32
48\t1033.368
44\t1033.412
40\t1033.452
36\t1033.488
32\t1033.52
28\t1033.548
24\t1033.572
20\t1033.592
16\t1033.608
12\t1033.62
8\t1033.628
4\t1033.632
0\t1033.632`

const data = data_raw
    .trim()
    .split("\n")
    .slice(1)
    .map(line => line.split("\t").map(Number))

const pos = data.map(([_, pos]) => pos)
const vel = data.map(([vel]) => vel)

test("can run joints interpolated - trivial case", async () => {
    // here we don't command any change in pos or vel, so there is nothing to do
    await gbc.run(api => api.moveJointsInterpolated([0], [0]))
})

test("can run joints interpolated - data driven", async () => {
    // here we don't command any change in pos or vel, so there is nothing to do
    try {
        gbc.disable_limit_check()
        const activities = Array.from({ length: 5 }).map((_, n) => {
            return gbc.stream.moveJointsInterpolated([pos[n]], [vel[n]]).command
        })
        activities.push(gbc.stream.endProgram().command)
        gbc.enqueue(activities).exec(150)
    } finally {
        gbc.plot("test")
    }
})

const j1_pos = `
0
0.00517017
0.0206807
0.0465316
0.0827228
0.129043
0.172616
0.205848
0.22874
0.241292
0.243927`
    .trim()
    .split("\n")
    .map(Number)

const j1_pos_20ms = `
0
0.000206807
0.000827228
0.00186126
0.00330891
0.00517017
0.00744505
0.0101335
0.0132356
0.0167514
0.0206807
0.0250236
0.0297802
0.0349504
0.0405342
0.0465316
0.0529426
0.0597672
0.0670054
0.0746573
0.0827228
0.0912019
0.100095
0.109401
0.119121
0.129043
0.138585
0.147713
0.156427
0.164728
0.172616
0.180089
0.187149
0.193796
0.200029
0.205848
0.211254
0.216246
0.220824
0.224989
0.22874
0.232078
0.235002
0.237512
0.239609
0.241292
0.242562
0.243418
0.24386
0.243927
`
    .trim()
    .split("\n")
    .map(Number)

const j1_vel = `
0
0.103403
0.206807
0.31021
0.413614
0.487431
0.384027
0.280624
0.17722
0.073817
0`
    .trim()
    .split("\n")
    .map(Number)

const j1_vel_20ms = `
0
0.0206807
0.0413614
0.0620421
0.0827228
0.103403
0.124084
0.144765
0.165446
0.186126
0.206807
0.227488
0.248168
0.268849
0.28953
0.31021
0.330891
0.351572
0.372252
0.392933
0.413614
0.434295
0.454975
0.475656
0.496337
0.487431
0.46675
0.446069
0.425389
0.404708
0.384027
0.363347
0.342666
0.321985
0.301305
0.280624
0.259943
0.239263
0.218582
0.197901
0.17722
0.15654
0.135859
0.115178
0.0944977
0.073817
0.0531363
0.0324556
0.0117749
0 `
    .trim()
    .split("\n")
    .map(Number)

console.log("LENS", j1_pos_20ms.length, j1_vel_20ms.length)

test("can run joints interpolated - real data - 100ms", async () => {
    try {
        gbc.disable_limit_check()
        const activities = Array.from({ length: 10 }).map((_, n) => {
            return gbc.stream.moveJointsInterpolated(n * 0.1, [j1_pos[n + 1]], [j1_vel[n + 1]])
                .command
        })
        activities.push(gbc.stream.endProgram().command)
        gbc.enqueue(activities).exec(300)
    } finally {
        gbc.plot("test")
    }
})

test.only("can run joints interpolated - 100ms - with fro change", async () => {
    try {
        gbc.disable_limit_check()
        const activities = Array.from({ length: 10 }).map((_, n) => {
            return gbc.stream.moveJointsInterpolated(n * 0.1, [j1_pos[n + 1]], [j1_vel[n + 1]])
                .command
        })
        activities.push(gbc.stream.endProgram().command)
        gbc.enqueue(activities).exec(100)
        // gbc.set_fro(0, 0.8)
        gbc.exec(200)
    } finally {
        gbc.plot("test")
    }
})

test("can run joints interpolated - real data - 20ms", async () => {
    // here we don't command any change in pos or vel, so there is nothing to do
    try {
        gbc.disable_limit_check()
        const activities = Array.from({ length: 49 }).map((_, n) => {
            return gbc.stream.moveJointsInterpolated(
                n * 0.05,
                [j1_pos_20ms[n + 1]],
                [j1_vel_20ms[n + 1]]
            ).command
        })
        activities.push(gbc.stream.endProgram().command)
        gbc.enqueue(activities).exec(300)
    } finally {
        gbc.plot("test")
    }
})

export const move_joints_interpolated = test
